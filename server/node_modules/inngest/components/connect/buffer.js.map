{"version":3,"file":"buffer.js","names":["headers: Record<string, string>"],"sources":["../../../src/components/connect/buffer.ts"],"sourcesContent":["import debug, { type Debugger } from \"debug\";\nimport { headerKeys } from \"../../helpers/consts.ts\";\nimport {\n  FlushResponse,\n  SDKResponse,\n} from \"../../proto/src/components/connect/protobuf/connect.ts\";\nimport type { Inngest } from \"../Inngest.ts\";\nimport { expBackoff } from \"./util.ts\";\n\nexport class MessageBuffer {\n  private buffered: Record<string, SDKResponse> = {};\n  private pending: Record<string, SDKResponse> = {};\n  private inngest: Inngest.Any;\n  private debug: Debugger;\n\n  constructor(inngest: Inngest.Any) {\n    this.inngest = inngest;\n    this.debug = debug(\"inngest:connect:message-buffer\");\n  }\n\n  public append(response: SDKResponse) {\n    this.buffered[response.requestId] = response;\n    delete this.pending[response.requestId];\n  }\n\n  public addPending(response: SDKResponse, deadline: number) {\n    this.pending[response.requestId] = response;\n    setTimeout(() => {\n      if (this.pending[response.requestId]) {\n        this.debug(\"Message not acknowledged in time\", response.requestId);\n        this.append(response);\n      }\n    }, deadline);\n  }\n\n  public acknowledgePending(requestId: string) {\n    delete this.pending[requestId];\n  }\n\n  private async sendFlushRequest(\n    hashedSigningKey: string | undefined,\n    msg: SDKResponse,\n  ) {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/protobuf\",\n      ...(hashedSigningKey\n        ? { Authorization: `Bearer ${hashedSigningKey}` }\n        : {}),\n    };\n\n    if (this.inngest.env) {\n      headers[headerKeys.Environment] = this.inngest.env;\n    }\n\n    const resp = await fetch(\n      // refactor this to a more universal spot\n      await this.inngest[\"inngestApi\"][\"getTargetUrl\"](\"/v0/connect/flush\"),\n      {\n        method: \"POST\",\n        body: new Uint8Array(SDKResponse.encode(msg).finish()),\n        headers: headers,\n      },\n    );\n\n    if (!resp.ok) {\n      this.debug(\"Failed to flush messages\", await resp.text());\n      throw new Error(\"Failed to flush messages\");\n    }\n\n    const flushResp = FlushResponse.decode(\n      new Uint8Array(await resp.arrayBuffer()),\n    );\n\n    return flushResp;\n  }\n\n  public async flush(hashedSigningKey: string | undefined) {\n    if (Object.keys(this.buffered).length === 0) {\n      return;\n    }\n\n    this.debug(`Flushing ${Object.keys(this.buffered).length} messages`);\n\n    for (let attempt = 0; attempt < 5; attempt++) {\n      for (const [k, v] of Object.entries(this.buffered)) {\n        try {\n          await this.sendFlushRequest(hashedSigningKey, v);\n          delete this.buffered[k];\n        } catch (err) {\n          this.debug(\"Failed to flush message\", k, err);\n          break;\n        }\n      }\n\n      if (Object.keys(this.buffered).length === 0) {\n        return;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, expBackoff(attempt)));\n    }\n\n    throw new Error(\"Failed to flush messages\");\n  }\n}\n"],"mappings":";;;;;;AASA,IAAa,gBAAb,MAA2B;CACzB,AAAQ,WAAwC,EAAE;CAClD,AAAQ,UAAuC,EAAE;CACjD,AAAQ;CACR,AAAQ;CAER,YAAY,SAAsB;AAChC,OAAK,UAAU;AACf,OAAK,QAAQ,MAAM,iCAAiC;;CAGtD,AAAO,OAAO,UAAuB;AACnC,OAAK,SAAS,SAAS,aAAa;AACpC,SAAO,KAAK,QAAQ,SAAS;;CAG/B,AAAO,WAAW,UAAuB,UAAkB;AACzD,OAAK,QAAQ,SAAS,aAAa;AACnC,mBAAiB;AACf,OAAI,KAAK,QAAQ,SAAS,YAAY;AACpC,SAAK,MAAM,oCAAoC,SAAS,UAAU;AAClE,SAAK,OAAO,SAAS;;KAEtB,SAAS;;CAGd,AAAO,mBAAmB,WAAmB;AAC3C,SAAO,KAAK,QAAQ;;CAGtB,MAAc,iBACZ,kBACA,KACA;EACA,MAAMA,UAAkC;GACtC,gBAAgB;GAChB,GAAI,mBACA,EAAE,eAAe,UAAU,oBAAoB,GAC/C,EAAE;GACP;AAED,MAAI,KAAK,QAAQ,IACf,SAAQ,WAAW,eAAe,KAAK,QAAQ;EAGjD,MAAM,OAAO,MAAM,MAEjB,MAAM,KAAK,QAAQ,cAAc,gBAAgB,oBAAoB,EACrE;GACE,QAAQ;GACR,MAAM,IAAI,WAAW,YAAY,OAAO,IAAI,CAAC,QAAQ,CAAC;GAC7C;GACV,CACF;AAED,MAAI,CAAC,KAAK,IAAI;AACZ,QAAK,MAAM,4BAA4B,MAAM,KAAK,MAAM,CAAC;AACzD,SAAM,IAAI,MAAM,2BAA2B;;AAO7C,SAJkB,cAAc,OAC9B,IAAI,WAAW,MAAM,KAAK,aAAa,CAAC,CACzC;;CAKH,MAAa,MAAM,kBAAsC;AACvD,MAAI,OAAO,KAAK,KAAK,SAAS,CAAC,WAAW,EACxC;AAGF,OAAK,MAAM,YAAY,OAAO,KAAK,KAAK,SAAS,CAAC,OAAO,WAAW;AAEpE,OAAK,IAAI,UAAU,GAAG,UAAU,GAAG,WAAW;AAC5C,QAAK,MAAM,CAAC,GAAG,MAAM,OAAO,QAAQ,KAAK,SAAS,CAChD,KAAI;AACF,UAAM,KAAK,iBAAiB,kBAAkB,EAAE;AAChD,WAAO,KAAK,SAAS;YACd,KAAK;AACZ,SAAK,MAAM,2BAA2B,GAAG,IAAI;AAC7C;;AAIJ,OAAI,OAAO,KAAK,KAAK,SAAS,CAAC,WAAW,EACxC;AAGF,SAAM,IAAI,SAAS,YAAY,WAAW,SAAS,WAAW,QAAQ,CAAC,CAAC;;AAG1E,QAAM,IAAI,MAAM,2BAA2B"}