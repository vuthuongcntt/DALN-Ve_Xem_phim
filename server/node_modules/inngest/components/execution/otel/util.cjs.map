{"version":3,"file":"util.cjs","names":["InngestSpanProcessor","BasicTracerProvider","instrList: Instrumentations","AsyncHooksContextManager","trace"],"sources":["../../../../src/components/execution/otel/util.ts"],"sourcesContent":["import { trace } from \"@opentelemetry/api\";\nimport { getNodeAutoInstrumentations } from \"@opentelemetry/auto-instrumentations-node\";\nimport { AsyncHooksContextManager } from \"@opentelemetry/context-async-hooks\";\nimport {\n  type Instrumentation,\n  registerInstrumentations,\n} from \"@opentelemetry/instrumentation\";\nimport { BasicTracerProvider } from \"@opentelemetry/sdk-trace-base\";\nimport { InngestSpanProcessor } from \"./processor.ts\";\n\nexport type Behaviour = \"createProvider\" | \"extendProvider\" | \"off\" | \"auto\";\nexport type Instrumentations = (Instrumentation | Instrumentation[])[];\n\nexport const createProvider = (\n  _behaviour: Behaviour,\n  instrumentations: Instrumentations | undefined = [],\n): { success: true; processor: InngestSpanProcessor } | { success: false } => {\n  // TODO Check if there's an existing provider\n  const processor = new InngestSpanProcessor();\n\n  const p = new BasicTracerProvider({\n    spanProcessors: [processor],\n  });\n\n  const instrList: Instrumentations = [\n    ...instrumentations,\n    ...getNodeAutoInstrumentations(),\n  ];\n\n  registerInstrumentations({\n    instrumentations: instrList,\n  });\n\n  p.register({\n    contextManager: new AsyncHooksContextManager().enable(),\n  });\n\n  return { success: true, processor };\n};\n\n/**\n * Attempts to extend the existing OTel provider with our processor. Returns true\n * if the provider was extended, false if it was not.\n */\nexport const extendProvider = (\n  behaviour: Behaviour,\n): { success: true; processor: InngestSpanProcessor } | { success: false } => {\n  // Attempt to add our processor and export to the existing provider\n  const existingProvider = trace.getTracerProvider();\n  if (!existingProvider) {\n    if (behaviour !== \"auto\") {\n      console.warn(\n        'No existing OTel provider found and behaviour is \"extendProvider\". Inngest\\'s OTel middleware will not work. Either allow the middleware to create a provider by setting `behaviour: \"createProvider\"` or `behaviour: \"auto\"`, or make sure that the provider is created and imported before the middleware is used.',\n      );\n    }\n\n    return { success: false };\n  }\n\n  if (\n    !(\"addSpanProcessor\" in existingProvider) ||\n    typeof existingProvider.addSpanProcessor !== \"function\"\n  ) {\n    // TODO Could we also add a function the user can provide that takes the\n    // processor and adds it? That way they could support many different\n    // providers.\n    if (behaviour !== \"auto\") {\n      console.warn(\n        \"Existing OTel provider is not a BasicTracerProvider. Inngest's OTel middleware will not work, as it can only extend an existing processor if it's a BasicTracerProvider.\",\n      );\n    }\n\n    return { success: false };\n  }\n\n  const processor = new InngestSpanProcessor();\n  existingProvider.addSpanProcessor(processor);\n\n  return { success: true, processor };\n};\n"],"mappings":";;;;;;;;;;;;;;AAaA,MAAa,kBACX,YACA,mBAAiD,EAAE,KACyB;CAE5E,MAAM,YAAY,IAAIA,wCAAsB;CAE5C,MAAM,IAAI,IAAIC,mDAAoB,EAChC,gBAAgB,CAAC,UAAU,EAC5B,CAAC;CAEF,MAAMC,YAA8B,CAClC,GAAG,kBACH,gFAAgC,CACjC;AAED,+DAAyB,EACvB,kBAAkB,WACnB,CAAC;AAEF,GAAE,SAAS,EACT,gBAAgB,IAAIC,8DAA0B,CAAC,QAAQ,EACxD,CAAC;AAEF,QAAO;EAAE,SAAS;EAAM;EAAW;;;;;;AAOrC,MAAa,kBACX,cAC4E;CAE5E,MAAM,mBAAmBC,0BAAM,mBAAmB;AAClD,KAAI,CAAC,kBAAkB;AACrB,MAAI,cAAc,OAChB,SAAQ,KACN,4TACD;AAGH,SAAO,EAAE,SAAS,OAAO;;AAG3B,KACE,EAAE,sBAAsB,qBACxB,OAAO,iBAAiB,qBAAqB,YAC7C;AAIA,MAAI,cAAc,OAChB,SAAQ,KACN,2KACD;AAGH,SAAO,EAAE,SAAS,OAAO;;CAG3B,MAAM,YAAY,IAAIJ,wCAAsB;AAC5C,kBAAiB,iBAAiB,UAAU;AAE5C,QAAO;EAAE,SAAS;EAAM;EAAW"}