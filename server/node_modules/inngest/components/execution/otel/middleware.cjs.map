{"version":3,"file":"middleware.cjs","names":["debug","debugPrefix","#logger","DiagLogLevel","processor: InngestSpanProcessor | undefined","extendProvider","createProvider","InngestMiddleware","diag","trace","version"],"sources":["../../../../src/components/execution/otel/middleware.ts"],"sourcesContent":["import { type DiagLogger, DiagLogLevel, diag, trace } from \"@opentelemetry/api\";\nimport Debug from \"debug\";\nimport { version } from \"../../../version.ts\";\nimport { InngestMiddleware } from \"../../InngestMiddleware.ts\";\nimport { clientProcessorMap } from \"./access.ts\";\nimport { debugPrefix } from \"./consts.ts\";\nimport type { InngestSpanProcessor } from \"./processor.ts\";\nimport {\n  type Behaviour,\n  createProvider,\n  extendProvider,\n  type Instrumentations,\n} from \"./util.ts\";\n\nconst debug = Debug(`${debugPrefix}:middleware`);\n\nclass InngestOtelDiagLogger implements DiagLogger {\n  #logger = Debug(`${debugPrefix}:diag`);\n\n  debug = this.#logger;\n  error = this.#logger;\n  info = this.#logger;\n  verbose = this.#logger;\n  warn = this.#logger;\n}\n\n/**\n * A set of options for the OTel middleware.\n */\nexport interface OTelMiddlewareOptions {\n  /**\n   * The behaviour of the OTel middleware. This controls whether the\n   * middleware will create a new OTel provider, extend an existing one, or\n   * do nothing. The default is \"auto\", which will attempt to extend an\n   * existing provider, and if that fails, create a new one.\n   *\n   * - `\"auto\"`: Attempt to extend an existing provider, and if that fails,\n   *   create a new one.\n   * - `\"createProvider\"`: Create a new OTel provider.\n   * - `\"extendProvider\"`: Attempt to extend an existing provider.\n   * - `\"off\"`: Do nothing.\n   */\n  behaviour?: Behaviour;\n\n  /**\n   * Add additional instrumentations to the OTel provider.\n   *\n   * Note that these only apply if the provider is created by the middleware;\n   * extending an existing provider cannot add instrumentations and it instead\n   * must be done wherever the provider is created.\n   */\n  instrumentations?: Instrumentations;\n\n  /**\n   * The log level for the OTel middleware, specifially a diagnostic logger\n   * attached to the global OTel provider.\n   *\n   * Defaults to `DiagLogLevel.ERROR`.\n   */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * Middleware the captures and exports spans relevant to Inngest runs using\n * OTel.\n *\n * This can be used to attach additional spans and data to the existing traces\n * in your Inngest dashboard (or Dev Server).\n */\nexport const otelMiddleware = ({\n  behaviour = \"auto\",\n  instrumentations,\n  logLevel = DiagLogLevel.ERROR,\n}: OTelMiddlewareOptions = {}) => {\n  debug(\"behaviour:\", behaviour);\n\n  let processor: InngestSpanProcessor | undefined;\n\n  switch (behaviour) {\n    case \"auto\": {\n      const extended = extendProvider(behaviour);\n      if (extended.success) {\n        debug(\"extended existing provider\");\n        processor = extended.processor;\n        break;\n      }\n\n      const created = createProvider(behaviour, instrumentations);\n      if (created.success) {\n        debug(\"created new provider\");\n        processor = created.processor;\n        break;\n      }\n\n      console.warn(\"no provider found to extend and unable to create one\");\n\n      break;\n    }\n    case \"createProvider\": {\n      const created = createProvider(behaviour, instrumentations);\n      if (created.success) {\n        debug(\"created new provider\");\n        processor = created.processor;\n        break;\n      }\n\n      console.warn(\"unable to create provider, OTel middleware will not work\");\n\n      break;\n    }\n    case \"extendProvider\": {\n      const extended = extendProvider(behaviour);\n      if (extended.success) {\n        debug(\"extended existing provider\");\n        processor = extended.processor;\n        break;\n      }\n\n      console.warn(\n        'unable to extend provider, OTel middleware will not work. Either allow the middleware to create a provider by setting `behaviour: \"createProvider\"` or `behaviour: \"auto\"`, or make sure that the provider is created and imported before the middleware is used.',\n      );\n\n      break;\n    }\n    case \"off\": {\n      break;\n    }\n    default: {\n      // unknown\n      console.warn(\n        `unknown behaviour ${JSON.stringify(behaviour)}, defaulting to \"off\"`,\n      );\n    }\n  }\n\n  return new InngestMiddleware({\n    name: \"Inngest: OTel\",\n    init({ client }) {\n      // Set the logger for our otel processors and exporters.\n      // If this is called multiple times (for example by the user in some other\n      // custom code), then only the first call is set, so we don't have to\n      // worry about overwriting it here accidentally.\n      //\n      debug(\n        \"set otel diagLogger:\",\n        diag.setLogger(new InngestOtelDiagLogger(), logLevel),\n      );\n\n      if (processor) {\n        clientProcessorMap.set(client, processor);\n      }\n\n      return {\n        onFunctionRun() {\n          return {\n            transformInput() {\n              return {\n                ctx: {\n                  /**\n                   * A tracer that can be used to create spans within a step\n                   * that will be displayed on the Inngest dashboard (or Dev\n                   * Server).\n                   *\n                   * Note that creating spans outside of steps when the function\n                   * contains `step.*()` calls is not currently supported.\n                   */\n                  tracer: trace.getTracer(\"inngest\", version),\n                },\n              };\n            },\n\n            async beforeResponse() {\n              // Should this be awaited? And is it fine to flush after every\n              // execution?\n              await processor?.forceFlush();\n            },\n          };\n        },\n      };\n    },\n  });\n};\n"],"mappings":";;;;;;;;;;;;AAcA,MAAMA,6BAAc,GAAGC,2BAAY,aAAa;AAEhD,IAAM,wBAAN,MAAkD;CAChD,6BAAgB,GAAGA,2BAAY,OAAO;CAEtC,QAAQ,MAAKC;CACb,QAAQ,MAAKA;CACb,OAAO,MAAKA;CACZ,UAAU,MAAKA;CACf,OAAO,MAAKA;;;;;;;;;AA8Cd,MAAa,kBAAkB,EAC7B,YAAY,QACZ,kBACA,WAAWC,iCAAa,UACC,EAAE,KAAK;AAChC,SAAM,cAAc,UAAU;CAE9B,IAAIC;AAEJ,SAAQ,WAAR;EACE,KAAK,QAAQ;GACX,MAAM,WAAWC,4BAAe,UAAU;AAC1C,OAAI,SAAS,SAAS;AACpB,YAAM,6BAA6B;AACnC,gBAAY,SAAS;AACrB;;GAGF,MAAM,UAAUC,4BAAe,WAAW,iBAAiB;AAC3D,OAAI,QAAQ,SAAS;AACnB,YAAM,uBAAuB;AAC7B,gBAAY,QAAQ;AACpB;;AAGF,WAAQ,KAAK,uDAAuD;AAEpE;;EAEF,KAAK,kBAAkB;GACrB,MAAM,UAAUA,4BAAe,WAAW,iBAAiB;AAC3D,OAAI,QAAQ,SAAS;AACnB,YAAM,uBAAuB;AAC7B,gBAAY,QAAQ;AACpB;;AAGF,WAAQ,KAAK,2DAA2D;AAExE;;EAEF,KAAK,kBAAkB;GACrB,MAAM,WAAWD,4BAAe,UAAU;AAC1C,OAAI,SAAS,SAAS;AACpB,YAAM,6BAA6B;AACnC,gBAAY,SAAS;AACrB;;AAGF,WAAQ,KACN,wQACD;AAED;;EAEF,KAAK,MACH;EAEF,QAEE,SAAQ,KACN,qBAAqB,KAAK,UAAU,UAAU,CAAC,uBAChD;;AAIL,QAAO,IAAIE,4CAAkB;EAC3B,MAAM;EACN,KAAK,EAAE,UAAU;AAMf,WACE,wBACAC,yBAAK,UAAU,IAAI,uBAAuB,EAAE,SAAS,CACtD;AAED,OAAI,UACF,mCAAmB,IAAI,QAAQ,UAAU;AAG3C,UAAO,EACL,gBAAgB;AACd,WAAO;KACL,iBAAiB;AACf,aAAO,EACL,KAAK,EASH,QAAQC,0BAAM,UAAU,WAAWC,wBAAQ,EAC5C,EACF;;KAGH,MAAM,iBAAiB;AAGrB,YAAM,WAAW,YAAY;;KAEhC;MAEJ;;EAEJ,CAAC"}