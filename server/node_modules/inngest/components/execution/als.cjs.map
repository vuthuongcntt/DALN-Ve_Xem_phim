{"version":3,"file":"als.cjs","names":[],"sources":["../../../src/components/execution/als.ts"],"sourcesContent":["import type { Context, StepOptions } from \"../../types.ts\";\nimport type { Inngest } from \"../Inngest.ts\";\n\nexport interface AsyncContext {\n  /**\n   * The Inngest App that is currently being used to execute the function.\n   */\n  app: Inngest.Like;\n\n  /**\n   * The `ctx` object that has been passed in to this function execution,\n   * including values such as `step` and `event`.\n   */\n  ctx: Context.Any;\n\n  /**\n   * If present, this indicates we are currently executing a `step.run()` step's\n   * callback. Useful to understand whether we are in the context of a step\n   * execution or within the main function body.\n   */\n  executingStep?: StepOptions;\n}\n\n/**\n * A local-only symbol used as a key in global state to store the async local\n * storage instance.\n */\nconst alsSymbol = Symbol.for(\"inngest:als\");\n\n/**\n * A type that represents a partial, runtime-agnostic interface of\n * `AsyncLocalStorage`.\n */\ntype AsyncLocalStorageIsh = {\n  getStore: () => AsyncContext | undefined;\n  run: <R>(store: AsyncContext, fn: () => R) => R;\n};\n\n/**\n * Retrieve the async context for the current execution.\n */\nexport const getAsyncCtx = async (): Promise<AsyncContext | undefined> => {\n  return getAsyncLocalStorage().then((als) => als.getStore());\n};\n\n/**\n * Get a singleton instance of `AsyncLocalStorage` used to store and retrieve\n * async context for the current execution.\n */\nexport const getAsyncLocalStorage = async (): Promise<AsyncLocalStorageIsh> => {\n  (globalThis as Record<string | symbol | number, unknown>)[alsSymbol] ??=\n    new Promise<AsyncLocalStorageIsh>(async (resolve) => {\n      try {\n        const { AsyncLocalStorage } = await import(\"node:async_hooks\");\n\n        resolve(new AsyncLocalStorage<AsyncContext>());\n      } catch (_err) {\n        console.warn(\n          \"node:async_hooks is not supported in this runtime. Experimental async context is disabled.\",\n        );\n\n        resolve({\n          getStore: () => undefined,\n          run: (_, fn) => fn(),\n        });\n      }\n    });\n\n  return (globalThis as Record<string | symbol | number, unknown>)[\n    alsSymbol\n  ] as Promise<AsyncLocalStorageIsh>;\n};\n"],"mappings":";;;;;;AA2BA,MAAM,YAAY,OAAO,IAAI,cAAc;;;;AAc3C,MAAa,cAAc,YAA+C;AACxE,QAAO,sBAAsB,CAAC,MAAM,QAAQ,IAAI,UAAU,CAAC;;;;;;AAO7D,MAAa,uBAAuB,YAA2C;AAC7E,CAAC,WAAyD,eACxD,IAAI,QAA8B,OAAO,YAAY;AACnD,MAAI;GACF,MAAM,EAAE,sBAAsB,MAAM,OAAO;AAE3C,WAAQ,IAAI,mBAAiC,CAAC;WACvC,MAAM;AACb,WAAQ,KACN,6FACD;AAED,WAAQ;IACN,gBAAgB;IAChB,MAAM,GAAG,OAAO,IAAI;IACrB,CAAC;;GAEJ;AAEJ,QAAQ,WACN"}