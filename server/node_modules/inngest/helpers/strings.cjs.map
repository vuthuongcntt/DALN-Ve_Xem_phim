{"version":3,"file":"strings.cjs","names":["hashjs","milliseconds: number","timeStr"],"sources":["../../src/helpers/strings.ts"],"sourcesContent":["import hashjs from \"hash.js\";\nimport { default as safeStringify } from \"json-stringify-safe\";\nimport ms from \"ms\";\nimport type { TimeStr } from \"../types.ts\";\n\nconst { sha256 } = hashjs;\n\n/**\n * Safely `JSON.stringify()` an `input`, handling circular refernences and\n * removing `BigInt` values.\n */\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport const stringify = (input: any): string => {\n  return safeStringify(input, (_key, value) => {\n    if (typeof value !== \"bigint\") {\n      return value;\n    }\n  });\n};\n\n/**\n * Returns a slugified string used to generate consistent IDs.\n *\n * This can be used to generate a consistent ID for a function when migrating\n * from v2 to v3 of the SDK.\n *\n * @public\n */\nexport const slugify = (str: string): string => {\n  const join = \"-\";\n  return str\n    .toLowerCase()\n    .replace(/[^a-z0-9-]+/g, join)\n    .replace(/-+/g, join)\n    .split(join)\n    .filter(Boolean)\n    .join(join);\n};\n\nconst millisecond = 1;\nconst second = millisecond * 1000;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\n\n/**\n * A collection of periods in milliseconds and their suffixes used when creating\n * time strings.\n */\nconst periods = [\n  [\"w\", week],\n  [\"d\", day],\n  [\"h\", hour],\n  [\"m\", minute],\n  [\"s\", second],\n] as const;\n\n/**\n * Convert a given `Date`, `number`, or `ms`-compatible `string` to a\n * Inngest sleep-compatible time string (e.g. `\"1d\"` or `\"2h3010s\"`).\n *\n * Can optionally provide a `now` date to use as the base for the calculation,\n * otherwise a new date will be created on invocation.\n */\nexport const timeStr = (\n  /**\n   * The future date to use to convert to a time string.\n   */\n  input: string | number | Date,\n): string => {\n  if (input instanceof Date) {\n    return input.toISOString();\n  }\n\n  const milliseconds: number =\n    typeof input === \"string\" ? ms(input as `${number}`) : input;\n\n  const [, timeStr] = periods.reduce<[number, string]>(\n    ([num, str], [suffix, period]) => {\n      const numPeriods = Math.floor(num / period);\n\n      if (numPeriods > 0) {\n        return [num % period, `${str}${numPeriods}${suffix}`];\n      }\n\n      return [num, str];\n    },\n    [milliseconds, \"\"],\n  );\n\n  return timeStr as TimeStr;\n};\n\n/**\n * Given an unknown input, stringify it if it's a boolean, a number, or a\n * string, else return `undefined`.\n */\nexport const stringifyUnknown = (input: unknown): string | undefined => {\n  if (\n    typeof input === \"boolean\" ||\n    typeof input === \"number\" ||\n    typeof input === \"string\"\n  ) {\n    return input.toString();\n  }\n\n  return;\n};\n\nexport const hashEventKey = (eventKey: string): string => {\n  return sha256().update(eventKey).digest(\"hex\");\n};\n\nexport const hashSigningKey = (signingKey: string | undefined): string => {\n  if (!signingKey) {\n    return \"\";\n  }\n\n  const prefix = signingKey.match(/^signkey-[\\w]+-/)?.shift() || \"\";\n  const key = signingKey.replace(/^signkey-[\\w]+-/, \"\");\n\n  // Decode the key from its hex representation into a bytestream\n  return `${prefix}${sha256().update(key, \"hex\").digest(\"hex\")}`;\n};\n"],"mappings":";;;;;;;;;AAKA,MAAM,EAAE,WAAWA;;;;;AAOnB,MAAa,aAAa,UAAuB;AAC/C,yCAAqB,QAAQ,MAAM,UAAU;AAC3C,MAAI,OAAO,UAAU,SACnB,QAAO;GAET;;;;;;;;;;AAWJ,MAAa,WAAW,QAAwB;CAC9C,MAAM,OAAO;AACb,QAAO,IACJ,aAAa,CACb,QAAQ,gBAAgB,KAAK,CAC7B,QAAQ,OAAO,KAAK,CACpB,MAAM,KAAK,CACX,OAAO,QAAQ,CACf,KAAK,KAAK;;AAIf,MAAM,SADc,IACS;AAC7B,MAAM,SAAS,SAAS;AACxB,MAAM,OAAO,SAAS;AACtB,MAAM,MAAM,OAAO;;;;;AAOnB,MAAM,UAAU;CACd,CAAC,KAPU,MAAM,EAON;CACX,CAAC,KAAK,IAAI;CACV,CAAC,KAAK,KAAK;CACX,CAAC,KAAK,OAAO;CACb,CAAC,KAAK,OAAO;CACd;;;;;;;;AASD,MAAa,WAIX,UACW;AACX,KAAI,iBAAiB,KACnB,QAAO,MAAM,aAAa;CAG5B,MAAMC,eACJ,OAAO,UAAU,2BAAc,MAAqB,GAAG;CAEzD,MAAM,GAAGC,aAAW,QAAQ,QACzB,CAAC,KAAK,MAAM,CAAC,QAAQ,YAAY;EAChC,MAAM,aAAa,KAAK,MAAM,MAAM,OAAO;AAE3C,MAAI,aAAa,EACf,QAAO,CAAC,MAAM,QAAQ,GAAG,MAAM,aAAa,SAAS;AAGvD,SAAO,CAAC,KAAK,IAAI;IAEnB,CAAC,cAAc,GAAG,CACnB;AAED,QAAOA;;;;;;AAOT,MAAa,oBAAoB,UAAuC;AACtE,KACE,OAAO,UAAU,aACjB,OAAO,UAAU,YACjB,OAAO,UAAU,SAEjB,QAAO,MAAM,UAAU;;AAM3B,MAAa,gBAAgB,aAA6B;AACxD,QAAO,QAAQ,CAAC,OAAO,SAAS,CAAC,OAAO,MAAM;;AAGhD,MAAa,kBAAkB,eAA2C;AACxE,KAAI,CAAC,WACH,QAAO;CAGT,MAAM,SAAS,WAAW,MAAM,kBAAkB,EAAE,OAAO,IAAI;CAC/D,MAAM,MAAM,WAAW,QAAQ,mBAAmB,GAAG;AAGrD,QAAO,GAAG,SAAS,QAAQ,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,MAAM"}