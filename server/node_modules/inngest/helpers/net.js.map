{"version":3,"file":"net.js","names":[],"sources":["../../src/helpers/net.ts"],"sourcesContent":["import canonicalize from \"canonicalize\";\nimport hashjs from \"hash.js\";\n\nconst { hmac, sha256 } = hashjs;\n\n/**\n * Send an HTTP request with the given signing key. If the response is a 401 or\n * 403, then try again with the fallback signing key\n */\nexport async function fetchWithAuthFallback<TFetch extends typeof fetch>({\n  authToken,\n  authTokenFallback,\n  fetch,\n  options,\n  url,\n}: {\n  authToken?: string;\n  authTokenFallback?: string;\n  fetch: TFetch;\n  options?: Parameters<TFetch>[1];\n  url: URL | string;\n}): Promise<Response> {\n  let res = await fetch(url, {\n    ...options,\n    headers: {\n      ...options?.headers,\n      Authorization: `Bearer ${authToken}`,\n    },\n  });\n\n  if ([401, 403].includes(res.status) && authTokenFallback) {\n    res = await fetch(url, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        Authorization: `Bearer ${authTokenFallback}`,\n      },\n    });\n  }\n\n  return res;\n}\n\nexport function signDataWithKey(\n  data: unknown,\n  signingKey: string,\n  ts: string,\n): string {\n  // Calculate the HMAC of the request body ourselves.\n  // We make the assumption here that a stringified body is the same as the\n  // raw bytes; it may be pertinent in the future to always parse, then\n  // canonicalize the body to ensure it's consistent.\n  const encoded = typeof data === \"string\" ? data : canonicalize(data);\n  // Remove the `/signkey-[test|prod]-/` prefix from our signing key to calculate the HMAC.\n  const key = signingKey.replace(/signkey-\\w+-/, \"\");\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  const mac = hmac(sha256 as any, key)\n    .update(encoded)\n    .update(ts)\n    .digest(\"hex\");\n\n  return mac;\n}\n"],"mappings":";;;;AAGA,MAAM,EAAE,MAAM,WAAW;;;;;AAMzB,eAAsB,sBAAmD,EACvE,WACA,mBACA,OACA,SACA,OAOoB;CACpB,IAAI,MAAM,MAAM,MAAM,KAAK;EACzB,GAAG;EACH,SAAS;GACP,GAAG,SAAS;GACZ,eAAe,UAAU;GAC1B;EACF,CAAC;AAEF,KAAI,CAAC,KAAK,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,kBACrC,OAAM,MAAM,MAAM,KAAK;EACrB,GAAG;EACH,SAAS;GACP,GAAG,SAAS;GACZ,eAAe,UAAU;GAC1B;EACF,CAAC;AAGJ,QAAO;;AAGT,SAAgB,gBACd,MACA,YACA,IACQ;CAKR,MAAM,UAAU,OAAO,SAAS,WAAW,OAAO,aAAa,KAAK;CAEpE,MAAM,MAAM,WAAW,QAAQ,gBAAgB,GAAG;AAOlD,QALY,KAAK,QAAe,IAAI,CACjC,OAAO,QAAQ,CACf,OAAO,GAAG,CACV,OAAO,MAAM"}