import type { ClerkPaginationRequest } from '@clerk/types';
import type { APIKey } from '../resources/APIKey';
import { AbstractAPI } from './AbstractApi';
type GetAPIKeyListParams = ClerkPaginationRequest<{
    /**
     * The user or organization ID to query API keys by
     */
    subject: string;
    /**
     * Whether to include invalid API keys.
     *
     * @default false
     */
    includeInvalid?: boolean;
}>;
type CreateAPIKeyParams = {
    type?: 'api_key';
    /**
     * API key name
     */
    name: string;
    /**
     * The user or organization ID to associate the API key with
     */
    subject: string;
    /**
     * API key description
     */
    description?: string | null;
    claims?: Record<string, any> | null;
    scopes?: string[];
    createdBy?: string | null;
    secondsUntilExpiration?: number | null;
};
type RevokeAPIKeyParams = {
    /**
     * API key ID
     */
    apiKeyId: string;
    /**
     * Reason for revocation
     */
    revocationReason?: string | null;
};
export declare class APIKeysAPI extends AbstractAPI {
    list(queryParams: GetAPIKeyListParams): Promise<APIKey[]>;
    create(params: CreateAPIKeyParams): Promise<APIKey>;
    revoke(params: RevokeAPIKeyParams): Promise<APIKey>;
    getSecret(apiKeyId: string): Promise<{
        secret: string;
    }>;
    verifySecret(secret: string): Promise<APIKey>;
}
export {};
//# sourceMappingURL=APIKeysApi.d.ts.map